services:
  db:
    image: pgvector/pgvector:pg16 # Use a specific version
    container_name: ragstar_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ragstar}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # Change this in production!
    ports:
      - "${POSTGRES_PORT:-5432}:5432" # Expose DB port to host if needed
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-ragstar}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ragstar_redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  backend-django:
    image: ragstar/backend_django
    build:
      context: ./backend_django
      dockerfile: Dockerfile
    container_name: ragstar_django
    ports:
      - "${APP_PORT:-8000}:8000" # Expose API server port
    volumes:
      - ./backend_django:/app # Mount local code for development
    env_file:
      - .env
    environment:
      # Use external DB URL if provided, otherwise use the 'db' service
      DATABASE_URL: ${EXTERNAL_POSTGRES_URL:-postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-ragstar}}
      CELERY_BROKER_URL: redis://redis:6379/0
      APP_PORT: ${APP_PORT:-8000}
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
      redis:
        condition: service_started
    restart: unless-stopped

  celery-worker:
    image: ragstar/celery_worker
    build:
      context: ./backend_django
      dockerfile: Dockerfile
    container_name: ragstar_celery_worker
    command: >
      sh -c "
        uv run celery -A ragstar worker -l info
      "
    volumes:
      - ./backend_django:/app # Mount local code for development
    env_file:
      - .env
    environment:
      DATABASE_URL: ${EXTERNAL_POSTGRES_URL:-postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-ragstar}}
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      - backend-django
      - redis
    restart: unless-stopped

  flower:
    image: ragstar/flower
    build:
      context: ./backend_django
      dockerfile: Dockerfile
    container_name: ragstar_flower
    command: >
      sh -c "
        uv run celery -A ragstar flower --address=0.0.0.0 --port=5555
      "
    ports:
      - "5555:5555"
    volumes:
      - ./backend_django:/app # Mount local code for development
    env_file:
      - .env
    environment:
      DATABASE_URL: ${EXTERNAL_POSTGRES_URL:-postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-ragstar}}
      CELERY_BROKER_URL: redis://redis:6379/0
    depends_on:
      - backend-django
      - redis
      - celery-worker
    restart: unless-stopped

  frontend-nextjs:
    image: ragstar/frontend_nextjs
    build:
      context: ./frontend_nextjs
      dockerfile: Dockerfile
      target: development
    container_name: ragstar_frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000" # Expose Next.js app port (host:container)
    volumes:
      # Mount source code for development
      - ./frontend_nextjs/src:/app/src
      - ./frontend_nextjs/public:/app/public
      # Mount config files individually
      - ./frontend_nextjs/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend_nextjs/next.config.ts:/app/next.config.ts:ro
      - ./frontend_nextjs/components.json:/app/components.json:ro
      - ./frontend_nextjs/postcss.config.mjs:/app/postcss.config.mjs:ro
      - ./frontend_nextjs/eslint.config.mjs:/app/eslint.config.mjs:ro
      # Preserve container's node_modules and .next for proper module resolution
      - frontend_node_modules:/app/node_modules
      - frontend_next_cache:/app/.next
    env_file:
      - .env
    environment:
      NODE_ENV: development # Explicitly set development mode for Next.js
      INTERNAL_API_URL: http://backend-django:8000 # Internal Docker network URL
    depends_on:
      - backend-django
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  frontend_node_modules:
    driver: local
  frontend_next_cache:
    driver: local
