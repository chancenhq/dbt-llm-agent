"""Create initial schema with model interpretations

Revision ID: 542cd72c270f
Revises:
Create Date: 2025-03-23 13:28:45.269265

"""

from typing import Sequence, Union
import logging

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from dbt_llm_agent.utils.logging import get_logger

# Get logger
logger = get_logger("alembic.migration")

# revision identifiers, used by Alembic.
revision: str = "542cd72c270f"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    logger.info("Starting model schema upgrade")

    # ### commands auto generated by Alembic - please adjust! ###

    # Add new columns
    logger.info("Adding new columns to models table")
    op.add_column(
        "models",
        sa.Column(
            "yml_description",
            sa.Text(),
            nullable=True,
            comment="Description from YML documentation",
        ),
    )
    op.add_column(
        "models",
        sa.Column(
            "yml_columns",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Columns from YML documentation",
        ),
    )
    op.add_column(
        "models",
        sa.Column(
            "interpretation",
            sa.Text(),
            nullable=True,
            comment="LLM-generated interpretation of the model",
        ),
    )
    op.add_column(
        "models",
        sa.Column(
            "interpreted_columns",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="LLM-interpreted column descriptions",
        ),
    )

    # Set documentation column comment
    logger.info("Setting documentation column comment")
    op.alter_column(
        "models",
        "documentation",
        existing_type=sa.TEXT(),
        comment="Original model documentation",
        existing_nullable=True,
    )

    # Migrate data from old columns to new ones
    logger.info("Migrating data from old columns to new ones")
    conn = op.get_bind()

    # Check if columns and description columns exist before migrating data
    insp = sa.inspect(conn)
    columns = insp.get_columns("models")
    column_names = [col["name"] for col in columns]

    if "description" in column_names and "yml_description" in column_names:
        conn.execute(
            sa.text(
                "UPDATE models SET yml_description = description WHERE yml_description IS NULL"
            )
        )
        logger.info("Migrated data from description → yml_description")

    if "columns" in column_names and "yml_columns" in column_names:
        conn.execute(
            sa.text("UPDATE models SET yml_columns = columns WHERE yml_columns IS NULL")
        )
        logger.info("Migrated data from columns → yml_columns")

    # Drop old columns after data migration
    if "columns" in column_names:
        logger.info("Dropping old 'columns' column")
        op.drop_column("models", "columns")

    if "description" in column_names:
        logger.info("Dropping old 'description' column")
        op.drop_column("models", "description")

    logger.info("Model schema upgrade completed")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    logger.info("Starting model schema downgrade")

    # ### commands auto generated by Alembic - please adjust! ###
    logger.info("Adding back original columns")
    op.add_column(
        "models",
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "models",
        sa.Column(
            "columns",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )

    # Migrate data back to old columns
    logger.info("Migrating data back to original columns")
    conn = op.get_bind()
    conn.execute(
        sa.text(
            "UPDATE models SET description = yml_description WHERE description IS NULL"
        )
    )
    conn.execute(
        sa.text("UPDATE models SET columns = yml_columns WHERE columns IS NULL")
    )

    logger.info("Restoring documentation column and dropping new columns")
    op.alter_column(
        "models",
        "documentation",
        existing_type=sa.TEXT(),
        comment=None,
        existing_comment="Original model documentation",
        existing_nullable=True,
    )
    op.drop_column("models", "interpreted_columns")
    op.drop_column("models", "interpretation")
    op.drop_column("models", "yml_columns")
    op.drop_column("models", "yml_description")

    logger.info("Model schema downgrade completed")
    # ### end Alembic commands ###
