"""Add response_message_ts to questions table

Revision ID: 0acc5a007f6c
Revises: 2969c3b41e2f
Create Date: 2025-04-28 11:25:23.887509

"""

from typing import Sequence, Union
import logging

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

from ragstar.utils.logging import get_logger

# Get logger
logger = get_logger(__name__)

# revision identifiers, used by Alembic.
revision: str = "0acc5a007f6c"
down_revision: Union[str, None] = "2969c3b41e2f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    logger.info(f"Starting Add response_message_ts to questions table upgrade")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("checkpoint_writes_thread_id_idx", table_name="checkpoint_writes")
    op.drop_table("checkpoint_writes")
    op.drop_index("checkpoint_blobs_thread_id_idx", table_name="checkpoint_blobs")
    op.drop_table("checkpoint_blobs")
    op.drop_index("checkpoints_thread_id_idx", table_name="checkpoints")
    op.drop_table("checkpoints")
    op.drop_table("checkpoint_migrations")
    op.alter_column(
        "models",
        "yml_columns",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_comment="Columns from YML documentation",
        existing_nullable=True,
    )
    op.alter_column(
        "models",
        "interpreted_columns",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_comment="LLM-interpreted column descriptions",
        existing_nullable=True,
    )
    op.add_column(
        "questions", sa.Column("response_message_ts", sa.String(), nullable=True)
    )
    op.alter_column(
        "questions",
        "question_embedding",
        existing_type=pgvector.sqlalchemy.Vector(dim=1536),
        comment="Embedding vector for the question text using text-embedding-ada-002",
        existing_comment="Embedding vector for the question text",
        existing_nullable=True,
    )
    # ### end Alembic commands ###

    logger.info(f"Completed Add response_message_ts to questions table upgrade")


def downgrade() -> None:
    """Downgrade schema."""
    logger.info(f"Starting Add response_message_ts to questions table downgrade")

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "questions",
        "question_embedding",
        existing_type=pgvector.sqlalchemy.Vector(dim=1536),
        comment="Embedding vector for the question text",
        existing_comment="Embedding vector for the question text using text-embedding-ada-002",
        existing_nullable=True,
    )
    op.drop_column("questions", "response_message_ts")
    op.alter_column(
        "models",
        "interpreted_columns",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_comment="LLM-interpreted column descriptions",
        existing_nullable=True,
    )
    op.alter_column(
        "models",
        "yml_columns",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_comment="Columns from YML documentation",
        existing_nullable=True,
    )
    op.create_table(
        "checkpoint_migrations",
        sa.Column("v", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("v", name="checkpoint_migrations_pkey"),
    )
    op.create_table(
        "checkpoints",
        sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "checkpoint_ns",
            sa.TEXT(),
            server_default=sa.text("''::text"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("checkpoint_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "parent_checkpoint_id", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column("type", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "checkpoint",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "thread_id", "checkpoint_ns", "checkpoint_id", name="checkpoints_pkey"
        ),
    )
    op.create_index(
        "checkpoints_thread_id_idx", "checkpoints", ["thread_id"], unique=False
    )
    op.create_table(
        "checkpoint_blobs",
        sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "checkpoint_ns",
            sa.TEXT(),
            server_default=sa.text("''::text"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("channel", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("version", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("type", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("blob", postgresql.BYTEA(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint(
            "thread_id",
            "checkpoint_ns",
            "channel",
            "version",
            name="checkpoint_blobs_pkey",
        ),
    )
    op.create_index(
        "checkpoint_blobs_thread_id_idx",
        "checkpoint_blobs",
        ["thread_id"],
        unique=False,
    )
    op.create_table(
        "checkpoint_writes",
        sa.Column("thread_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "checkpoint_ns",
            sa.TEXT(),
            server_default=sa.text("''::text"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("checkpoint_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("task_id", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("idx", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("channel", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("type", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("blob", postgresql.BYTEA(), autoincrement=False, nullable=False),
        sa.Column(
            "task_path",
            sa.TEXT(),
            server_default=sa.text("''::text"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint(
            "thread_id",
            "checkpoint_ns",
            "checkpoint_id",
            "task_id",
            "idx",
            name="checkpoint_writes_pkey",
        ),
    )
    op.create_index(
        "checkpoint_writes_thread_id_idx",
        "checkpoint_writes",
        ["thread_id"],
        unique=False,
    )
    # ### end Alembic commands ###

    logger.info(f"Completed Add response_message_ts to questions table downgrade")
